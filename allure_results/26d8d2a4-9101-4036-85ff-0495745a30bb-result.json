{"name": "Проверяем, что если кликнуть на ингредиент, появится всплывающее окно с деталями", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <p class=\"BurgerIngredient_ingredient__text__yp3dH\"> is not clickable at point (480,396) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:335:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:176:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:135:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:204:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31", "trace": "self = <test_main.TestMain object at 0x7f97f1ae5a20>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"b9f685fa-450e-4cd9-8b74-056608236ac7\")>\n\n    @allure.title('Проверяем, что если кликнуть на ингредиент, появится всплывающее окно с деталями')\n    def test_open_ingredient_modal(self, driver):\n        ingredient = MainPage(driver)\n    \n        ingredient.go_to_page(URLs.HOMEPAGE)\n>       ingredient.click_visible_element(LocatorsMain.INGREDIENT)\n\ntests/test_main.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:20: in click_visible_element\n    self.find_visible_element(locator, time).click()\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f97f1905b40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <p class=\\\\\"BurgerIngredien...sys.mjs:204:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <p class=\"BurgerIngredient_ingredient__text__yp3dH\"> is not clickable at point (480,396) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:335:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:176:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:135:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:204:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\n\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "Открываем браузер", "status": "passed", "parameters": [{"name": "driver", "value": "<selenium.webdriver.firefox.webdriver.WebDriver (session=\"b9f685fa-450e-4cd9-8b74-056608236ac7\")>"}], "start": 1710187832741, "stop": 1710187832741}, {"name": "Переходим на страницу", "status": "passed", "parameters": [{"name": "url", "value": "'https://stellarburgers.nomoreparties.site'"}], "start": 1710187832741, "stop": 1710187834059}], "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1710187832741, "stop": 1710187834129, "uuid": "0859055d-db5a-44ee-ae77-d7fc2e8c098e", "historyId": "bd7ee61e5e125c70a6697cbd63bae12a", "testCaseId": "3198730c2b934a3723f3c64caea6f73d", "fullName": "tests.test_main.TestMain#test_open_ingredient_modal", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_main"}, {"name": "subSuite", "value": "TestMain"}, {"name": "host", "value": "nif-MS-7680"}, {"name": "thread", "value": "51095-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_main"}]}