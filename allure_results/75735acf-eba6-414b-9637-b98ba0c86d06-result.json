{"name": "Проверяем, что всплывающее окно закрывается кликом по крестику", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_main.TestMain object at 0x7f97f1ae5c30>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"aa39ad80-2199-4379-acaf-8dd941436cae\")>\n\n    @allure.title('Проверяем, что всплывающее окно закрывается кликом по крестику')\n    def test_close_modal(self, driver):\n        modal = MainPage(driver)\n    \n        modal.go_to_page(URLs.HOMEPAGE)\n        modal.click_visible_element(LocatorsMain.INGREDIENT)\n        before_close_modal_class = modal.get_modal_class()\n    \n        modal.click_visible_element(LocatorsMain.MODAL_CLOSE)\n>       after_close_modal_class = modal.get_modal_class()\n\ntests/test_main.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/main_page.py:8: in get_modal_class\n    return self.get_attribute_value(LocatorsMain.MODAL, 'class')\npages/base_page.py:29: in get_attribute_value\n    return self.find_visible_element(locator).get_attribute(attribute)\npages/base_page.py:17: in find_visible_element\n    return WebDriverWait(self.driver, time).until(EC.visibility_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"aa39ad80-2199-4379-acaf-8dd941436cae\")>, method = <function visibility_of_element_located.<locals>._predicate at 0x7f97f1a47d90>, message = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:101: TimeoutException"}, "steps": [{"name": "Открываем браузер", "status": "passed", "parameters": [{"name": "driver", "value": "<selenium.webdriver.firefox.webdriver.WebDriver (session=\"aa39ad80-2199-4379-acaf-8dd941436cae\")>"}], "start": 1710187840730, "stop": 1710187840730}, {"name": "Переходим на страницу", "status": "passed", "parameters": [{"name": "url", "value": "'https://stellarburgers.nomoreparties.site'"}], "start": 1710187840731, "stop": 1710187841899}], "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1710187840730, "stop": 1710187852966, "uuid": "99171cbb-6616-4bbc-8f81-7446eae9bdb5", "historyId": "a2391888406dcf98e0798ce73156335f", "testCaseId": "86b7f43120206de54e1e7795ad3079bc", "fullName": "tests.test_main.TestMain#test_close_modal", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_main"}, {"name": "subSuite", "value": "TestMain"}, {"name": "host", "value": "nif-MS-7680"}, {"name": "thread", "value": "51095-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_main"}]}