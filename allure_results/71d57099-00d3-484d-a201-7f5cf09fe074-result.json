{"name": "Проверяем, что залогиненный пользователь может оформить заказ.", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_main.TestMain object at 0x7f6b37b7d630>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"b2ebf464-5f8d-4ec1-9192-629c0d19183f\")>\nauthorized_user = <pages.login_page.LoginPage object at 0x7f6b37940040>\n\n    @allure.title('Проверяем, что залогиненный пользователь может оформить заказ.')\n    def test_auth_user_create_order(self, driver, authorized_user):\n        authorized_user.go_to_page(URLs.HOMEPAGE)\n    \n        burger = authorized_user.find_visible_element(Locators.BURGER)\n        ingredient = authorized_user.find_visible_element(Locators.INGREDIENT)\n        ActionChains(driver).drag_and_drop(ingredient, burger).perform()\n    \n        authorized_user.click_visible_element(Locators.ORDER_BUTTON)\n    \n>       authorized_user.find_element_text_exclude(Locators.ORDER_NUMBER, '9999')\n\ntests/test_main.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:43: in find_element_text_exclude\n    return WebDriverWait(self.driver, 10).until_not(EC.text_to_be_present_in_element(locator, text))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b2ebf464-5f8d-4ec1-9192-629c0d19183f\")>, method = <function text_to_be_present_in_element.<locals>._predicate at 0x7f6b379a2f80>, message = ''\n\n    def until_not(self, method: Callable[[WebDriver], T], message: str = \"\") -> Union[T, Literal[True]]:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value evaluates to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`, or\n                  ``True`` if `method` has raised one of the ignored exceptions\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if not value:\n                    return value\n            except self._ignored_exceptions:\n                return True\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:124: TimeoutException"}, "steps": [{"name": "Переходим на страницу", "status": "passed", "parameters": [{"name": "url", "value": "'https://stellarburgers.nomoreparties.site'"}], "start": 1709763529319, "stop": 1709763529552}], "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1709763529318, "stop": 1709763541369, "uuid": "ff01b288-041e-4bb9-aa81-8c6ef9ecbcd7", "historyId": "9e27964032eb874f993bb1c8dcd46dd7", "testCaseId": "b37c5ac586adfa9ff39de03a96f950d6", "fullName": "tests.test_main.TestMain#test_auth_user_create_order", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_main"}, {"name": "subSuite", "value": "TestMain"}, {"name": "host", "value": "nif-MS-7680"}, {"name": "thread", "value": "51050-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_main"}]}